{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gua\\\\forms\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      console.log('Name Input is valid');\n    }\n  });\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n\n    if (event.target.value.trim() !== '') {\n      setEnteredNameIsValid(true);\n    }\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n    }\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue);\n    setEnteredName('');\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        value: enteredName,\n        onBlur: nameInputBlurHandler,\n        onChange: nameInputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"NpBdDjtGXxwhrEFo1Ma3zaY+Jak=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["C:/Users/Gua/forms/src/components/SimpleInput.js"],"names":["useRef","useState","useEffect","SimpleInput","props","nameInputRef","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","console","log","nameInputChangeHandler","event","target","value","trim","nameInputBlurHandler","formSubmissionHandler","preventDefault","enteredValue","current","nameInputIsInvalid","nameInputClasses"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,OAA1B;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,YAAY,GAAGL,MAAM,EAA3B;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACO,kBAAD,EAAqBC,qBAArB,IAA8CR,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACS,kBAAD,EAAqBC,qBAArB,IAA8CV,QAAQ,CAAC,KAAD,CAA5D;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,kBAAJ,EAAwB;AACtBI,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;AACF,GAJQ,CAAT;;AAKA,QAAMC,sBAAsB,GAAGC,KAAK,IAAI;AACtCR,IAAAA,cAAc,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;;AAEA,QAAIF,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,IAAnB,OAA8B,EAAlC,EAAsC;AACpCT,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD;AACF,GAND;;AAQA,QAAMU,oBAAoB,GAAGJ,KAAK,IAAI;AACpCJ,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AAEA,QAAIL,WAAW,CAACY,IAAZ,OAAuB,EAA3B,EAA+B;AAC7BT,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AAED;AACF,GAPD;;AASA,QAAMW,qBAAqB,GAAGL,KAAK,IAAI;AACrCA,IAAAA,KAAK,CAACM,cAAN;AAEAV,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AAEA,QAAIL,WAAW,CAACY,IAAZ,OAAuB,EAA3B,EAA+B;AAC7BT,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACA;AACD;;AAEDA,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYP,WAAZ;AAEA,UAAMgB,YAAY,GAAGjB,YAAY,CAACkB,OAAb,CAAqBN,KAA1C;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYS,YAAZ;AACAf,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAhBD;;AAkBA,QAAMiB,kBAAkB,GAAG,CAAChB,kBAAD,IAAuBE,kBAAlD;AAEA,QAAMe,gBAAgB,GAAGD,kBAAkB,GAAE,sBAAF,GAA0B,cAArE;AAEA,sBACE;AAAM,IAAA,QAAQ,EAAEJ,qBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEK,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,GAAG,EAAEpB,YAAZ;AACA,QAAA,IAAI,EAAC,MADL;AAEA,QAAA,EAAE,EAAC,MAFH;AAGA,QAAA,KAAK,EAAEC,WAHP;AAIA,QAAA,MAAM,EAAEa,oBAJR;AAKA,QAAA,QAAQ,EAAEL;AALV;AAAA;AAAA;AAAA;AAAA,cAFF,EAQGU,kBAAkB,iBAAI;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARzB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAWE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAnED;;GAAMrB,W;;KAAAA,W;AAqEN,eAAeA,WAAf","sourcesContent":["import { useRef, useState } from \"react\";\nimport { useEffect } from \"react\";\n\nconst SimpleInput = (props) => {\n  const nameInputRef = useRef()\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false)\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false)\n\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      console.log('Name Input is valid');\n    }\n  })\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n\n    if (event.target.value.trim() !== '') {\n      setEnteredNameIsValid(true);\n    }\n  }\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n\n    }\n  }\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); \n\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false)\n      return;\n    }\n\n    setEnteredNameIsValid(true)\n    console.log(enteredName);\n\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue)\n    setEnteredName('')\n  }\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched\n\n  const nameInputClasses = nameInputIsInvalid ?'form-control invalid': 'form-control';\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input ref={nameInputRef} \n        type='text' \n        id='name' \n        value={enteredName} \n        onBlur={nameInputBlurHandler}\n        onChange={nameInputChangeHandler}/>\n        {nameInputIsInvalid && <p className=\"error-text\">Name must not be empty</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}