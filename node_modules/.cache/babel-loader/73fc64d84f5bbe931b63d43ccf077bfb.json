{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gua\\\\forms\\\\src\\\\components\\\\BasicForm.js\",\n    _s = $RefreshSig$();\n\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BasicForm = props => {\n  _s();\n\n  const {\n    value: enteredFirstName,\n    hasError: firstNameInputHasError,\n    isValid: enteredFirstNameIsValid,\n    valueChangeHandler: firstNameChangedHandler,\n    inputBlurHandler: firstNameBlurHandler,\n    reset: resetFirstNameInput\n  } = useInput(value => value.trim() !== '');\n  const {\n    value: enteredLastName,\n    hasError: lastNameInputHasError,\n    isValid: enteredLastNameIsValid,\n    valueChangeHandler: lastNameChangedHandler,\n    inputBlurHandler: lastNameBlurHandler,\n    reset: resetLastNameInput\n  } = useInput(value => value.trim() !== '');\n  const {\n    value: enteredEmail,\n    hasError: EmailInputHasError,\n    isValid: enteredEmailIsValid,\n    valueChangeHandler: emailChangedHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput\n  } = useInput(value => value.includes('@'));\n  let formIsValid = false;\n\n  if (enteredFirstNameIsValid && enteredEmailIsValid && enteredLastNameIsValid) {\n    formIsValid = true;\n  }\n\n  ;\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    resetFirstNameInput();\n    resetEmailInput();\n    resetLastNameInput();\n\n    if (!enteredFirstNameIsValid || !enteredEmailIsValid || !enteredLastNameIsValid) {\n      return;\n    }\n  };\n\n  const firstNameInputClasses = firstNameInputHasError ? 'form-control invalid' : 'form-control';\n  const lastNameInputClasses = lastNameInputHasError ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = EmailInputHasError ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onClick: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: firstNameInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"First Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          value: enteredFirstName,\n          onBlur: firstNameBlurHandler,\n          onChange: firstNameChangedHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), firstNameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: \"Name must not be empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: lastNameInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"lname\",\n          children: \"Last Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"lname\",\n          type: \"text\",\n          value: enteredLastName,\n          onChange: lastNameChangedHandler,\n          onBlur: lastNameBlurHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), lastNameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: \"Name must not be empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"E-Mail Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"email\",\n        type: \"email\",\n        value: enteredEmail,\n        onChange: emailChangedHandler,\n        onBlur: emailBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), EmailInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email must contain @\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BasicForm, \"arx8vY3A7lJPdMxiT3PcY13Xtxo=\", false, function () {\n  return [useInput, useInput, useInput];\n});\n\n_c = BasicForm;\nexport default BasicForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BasicForm\");","map":{"version":3,"sources":["C:/Users/Gua/forms/src/components/BasicForm.js"],"names":["useInput","BasicForm","props","value","enteredFirstName","hasError","firstNameInputHasError","isValid","enteredFirstNameIsValid","valueChangeHandler","firstNameChangedHandler","inputBlurHandler","firstNameBlurHandler","reset","resetFirstNameInput","trim","enteredLastName","lastNameInputHasError","enteredLastNameIsValid","lastNameChangedHandler","lastNameBlurHandler","resetLastNameInput","enteredEmail","EmailInputHasError","enteredEmailIsValid","emailChangedHandler","emailBlurHandler","resetEmailInput","includes","formIsValid","formSubmissionHandler","event","preventDefault","firstNameInputClasses","lastNameInputClasses","emailInputClasses"],"mappings":"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","sourcesContent":["\nimport useInput from \"../hooks/use-input\";\n\nconst BasicForm = (props) => {\n  const {\n    value: enteredFirstName,\n    hasError: firstNameInputHasError,\n    isValid: enteredFirstNameIsValid,\n    valueChangeHandler: firstNameChangedHandler,\n    inputBlurHandler: firstNameBlurHandler,\n    reset: resetFirstNameInput\n  } = useInput(value => value.trim() !== '');\n\n  const {\n    value: enteredLastName,\n    hasError: lastNameInputHasError,\n    isValid:enteredLastNameIsValid,\n    valueChangeHandler: lastNameChangedHandler,\n    inputBlurHandler: lastNameBlurHandler,\n    reset: resetLastNameInput\n  } = useInput(value => value.trim() !== '');\n\n  const {\n    value: enteredEmail,\n    hasError: EmailInputHasError,\n    isValid: enteredEmailIsValid,\n    valueChangeHandler: emailChangedHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput\n  } = useInput(value => value.includes('@'))\n\n\n\n  let formIsValid = false;\n\n  if (enteredFirstNameIsValid && enteredEmailIsValid && enteredLastNameIsValid) {\n    formIsValid = true\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    resetFirstNameInput()\n    resetEmailInput()\n    resetLastNameInput()\n\n    if (!enteredFirstNameIsValid || !enteredEmailIsValid || !enteredLastNameIsValid) {\n      return;\n    }\n  }\n\n  const firstNameInputClasses = firstNameInputHasError ? 'form-control invalid' : 'form-control';\n  const lastNameInputClasses = lastNameInputHasError ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = EmailInputHasError ? 'form-control invalid' : 'form-control';\n\n  return (\n    <form onClick={formSubmissionHandler}>\n      <div className='control-group'>\n        <div className={firstNameInputClasses}>\n          <label htmlFor='name'>First Name</label>\n          <input\n            type='text'\n            id='name'\n            value={enteredFirstName}\n            onBlur={firstNameBlurHandler}\n            onChange={firstNameChangedHandler} />\n          {firstNameInputHasError && <p className=\"error-text\">Name must not be empty</p>}\n        </div>\n        <div className={lastNameInputClasses}>\n          <label htmlFor='lname'>Last Name</label>\n          <input\n            id='lname'\n            type='text'\n            value={enteredLastName}\n            onChange={lastNameChangedHandler}\n            onBlur={lastNameBlurHandler}\n          />\n          {lastNameInputHasError && <p className=\"error-text\">Name must not be empty</p>}\n        </div>\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor='email'>E-Mail Address</label>\n        <input\n          id='email'\n          type='email'\n          value={enteredEmail}\n          onChange={emailChangedHandler}\n          onBlur={emailBlurHandler}\n        />\n        {EmailInputHasError && <p className=\"error-text\">Email must contain @</p>}\n      </div>\n      <div className='form-actions'>\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n"]},"metadata":{},"sourceType":"module"}